version: '3'

# хранилища
volumes:
    pgdata:
        driver: local
services:
    node:
      restart: always
      image: node:latest
      expose:
        - 8999
      ports:
        - 8999:8999
      volumes:
        - ./websocket:/srv/www/rostelecom/websocket
      command: node /srv/www/rostelecom/websocket/index.js

    nginx:
# при падении будет стараться подняться
        restart: always
# только свежий nginx
        image: nginx:latest
# слушает порт 8080
        expose:
          - 8080
# мапаем порт 80 на его 8080. Тогда сайт будет доступен по адресу localhost. Убедись, что порт у тебя не занят.
        ports:
          - "80:8080"
# монтируем только те директории, в которых лежит статика, т.к. nginx с динамикой не будет работать. Также директорию с логами и файл настройки, который мы подготовили.
        volumes:
            - ./static:/srv/www/rostelecom/static
            - ./media:/srv/www/rostelecom/media
            - ./logs:/srv/www/rostelecom/logs
            - ./nginx:/etc/nginx/conf.d
# и nginx зависит от контейнера python. Т.е. python должен быть запущен первым
        depends_on:
            - python
    python:
        restart: always
# указываем откуда собирать образ
        build:
            context: .
            dockerfile: ./Dockerfile
# монтируем директорию проекта
        volumes:
            - ./:/srv/www/rostelecom
        expose:
          - 8000
        ports:
            - 8000:8000
# запускаем gunicorn
        command: "gunicorn -c gunicorn.py backend.wsgi"
    postgres:
# Ниже даже расписывать не хочу, насколько все просто: логин, пароль, БД, порты и т.д.
        image: postgres:13-alpine
        ports:
            - 5432:5432
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: rostelecom_design
            PGDATA: /var/lib/postgresql/data
        volumes:
            - pgdata:/var/lib/postgresql/data
